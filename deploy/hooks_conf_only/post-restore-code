#!/bin/bash

# variables set here:
#   $TARGET: name of the symbolic remote host key (see remote_hosts 
#            section in config file)

PROJECT_NAME=$1
CODE_DIR=$2 # = dest = /var/cache/deploy/sphinxsearch.data.tmp/

SPHINXINDEX=/var/lib/sphinxsearch/data/index/

# fancy output
green='\e[0;32m'
red='\e[0;31m'
yellow='\e[1;33m'
NC='\e[0m' # No Color

if [ "$*" = "clean_index" ]; then
    echo "executing $0 $*"
    sphinxconfig="/etc/sphinxsearch/sphinx.conf"

    if [[ -f $sphinxconfig && -d $SPHINXINDEX ]];then
        array_config=($(grep path $sphinxconfig | awk -F"=" '{print $2}' | sed -n -e 's|^.*/||p'))
        array_file=($(find $SPHINXINDEX -maxdepth 1 -name "*.spd" | sed 's|.spd$||g' | sed -n -e 's|^.*/||p' ))
        array_orphaned=($(comm -13 --nocheck-order <(printf '%s\n' "${array_config[@]}" | LC_ALL=C sort) <(printf '%s\n' "${array_file[@]}" | LC_ALL=C sort)))

        echo -e "\t${green}looking for orphaned index $a in filesystem ...${NC}"
        for a in "${array_orphaned[@]}"; do
            if [[ $CLEAN_INDEX = "true" ]];
            then
                echo -e "\t${red} deleting orphaned index $a from filesystem ...${NC}"
                if [ "$(whoami)" = sphinxsearch ]; then
                    rm -rf $SPHINXINDEX""$a*
                else
                    sudo -u sphinxsearch rm -rf $SPHINXINDEX""$a*
                fi
            else
                echo -e "\t${yellow} - found orphaned index $a on filesystem - re-run the deploy script with the option clean_index ...${NC}"
            fi
        done

        echo -e "\t${green}looking for new indexes from config $sphinxconfig ...${NC}"
        result=$(indextool --checkconfig -c $sphinxconfig | grep "missed index" | sed -n -e 's/^missed index(es): //p' | sed "s/[',]//g"  | tr -s " ")
        if [[ $result ]];then
            if [[ $CLEAN_INDEX = "true" ]];
            then
                echo -e "\t${green}building new indexes from config $sphinxconfig ...${NC}"
                if [ "$(whoami)" = sphinxsearch ]; then
                    indexer --verbose --rotate --sighup-each --config $sphinxconfig $result | grep indexing
                else
                    sudo -u sphinxsearch indexer --verbose --rotate --sighup-each --config $sphinxconfig $result | grep indexing
                fi
            else
                echo -e "\t${yellow} + new indexes found in config $sphinxconfig [$result] - re-run the deploy script with the option clean_index ...${NC}"
            fi
        fi
        exit 0;
    else
        echo -e "\t${red}error - please check if $sphinxconfig and $SPHINXINDEX are there...${NC}"
        exit 1;
    fi
fi

if [[ $CLEAN_INDEX = "true" ]];
then
    bash $0 clean_index
    exit 0;
fi

echo "create index directory $SPHINXINDEX if it does not yet exists..."
sudo -u sphinxsearch mkdir -p $SPHINXINDEX

echo "make backup of current sphinx config..."
sudo -u sphinxsearch cp -f /etc/sphinxsearch/sphinx.conf /etc/sphinxsearch/sphinx.conf.backup

# start sphinxsearch if it is not running with old configuration
if ! pgrep searchd > /dev/null
then
    echo -e "    ${red}WARNING: service was not running${NC}"
    echo "starting sphinx service with old configuration ..."
    sudo -u sphinxsearch /etc/init.d/sphinxsearch start | grep -i "WARNING\|ERROR"
fi

echo "copy files preserving timestamp ..."
sudo -u sphinxsearch cp -f $CODE_DIR""sphinx.conf /etc/sphinxsearch/
sudo -u sphinxsearch cp -f $CODE_DIR""*.py /etc/sphinxsearch/
sudo -u sphinxsearch cp -f $CODE_DIR""wordforms_* /etc/sphinxsearch/
sudo -u sphinxsearch rsync --update -qavz $CODE_DIR $SPHINXINDEX

DBHOST=$DBHOST_DEFAULT
# TARGET -> integration
if [[ $TARGET == int ]]
then
  DBHOST=$DBHOST_INT;
fi

# TARGET -> production
if [[ $TARGET == prod ]]
then
  DBHOST=$DBHOST_PROD
fi

# TARGET -> demo
if [[ $TARGET == demo ]]
then
  DBHOST=$DBHOST_DEMO
fi

echo "replace db host with $DBHOST ..."
sudo -u sphinxsearch sed -i "s/pgcluster.dev.bgdi.ch/$DBHOST/g" /etc/sphinxsearch/sphinx.conf

if [ ! -z "$DBPATTERN" ]
then
    echo "updating sphinx indexes, using database pattern: $DBPATTERN"
    if [ "$DBPATTERN" == "all" ]
    then
        sudo -u sphinxsearch python -u $PGTRIGGER -c update 
    else
        sudo -u sphinxsearch python -u $PGTRIGGER -d $DBPATTERN -c update    
    fi
elif [ ! -z "$INDEXPATTERN" ]
then
    echo "updating sphinx indexes, using index pattern: $INDEXPATTERN"
    sudo -u sphinxsearch python -u $PGTRIGGER -i $INDEXPATTERN -c update    
else
    echo "no sphinx indexes will be updated ..."
    # reload new sphinx configuration
    echo "trying to load new sphinx config ..."
    sudo -u sphinxsearch /etc/init.d/sphinxsearch reload | grep -i "WARNING\|ERROR"
fi

COUNTER=1
while [ $(find $SPHINXINDEX -name "*.new.*" | wc -l) -ne 0  ]
do
    echo "$COUNTER waiting for index rotation to be finished before retarting service ..."
    sleep 1
    COUNTER=$(($COUNTER +1))
done

# Check if service is running, if not try to restart the service
WAITFORSPHINX=3
COUNTER=0
while ! pgrep searchd > /dev/null
do
    if [ $COUNTER -ne 0 ]; then
        # Show this message after the first try only
        echo -e "${red}service not running, try $COUNTER of $WAITFORSPHINX to start service ...${NC}"
    fi
    echo "    starting sphinx service with new config ..."
    sudo -u sphinxsearch /etc/init.d/sphinxsearch start | grep -i "WARNING\|ERROR"
    sleep 5
    COUNTER=$(($COUNTER +1))
    if test $COUNTER -gt $WAITFORSPHINX
    then
        # if service cannot be started with new config, use old config instead
        echo -e "${red}service could not be started, using old config${NC}"
        if [ -f "/etc/sphinxsearch/sphinx.conf.backup" ]; then
            sudo -u sphinxsearch mv /etc/sphinxsearch/sphinx.conf.backup /etc/sphinxsearch/sphinx.conf
            echo "    starting sphinx service with old config ..."
            sudo -u sphinxsearch /etc/init.d/sphinxsearch start | grep -i "WARNING\|ERROR"
        else
            echo -e "${red}WARNING: no valid sphinx configuration available. SERVICE NOT RUNNING${NC}"
            exit 1
        fi
        sleep 5
        break
    fi
done

if pgrep searchd > /dev/null
then
    echo -e "${green}service is running with process id: $(pgrep searchd)${NC}"
else
    echo -e "${red}WARNING: $(sudo -u sphinxsearch /etc/init.d/sphinxsearch status)${NC}"
fi

bash $0 clean_index
exit 0
